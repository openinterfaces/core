{"name":"OpenInterfaces","tagline":"","body":"About\r\n-----\r\n\r\nDue to increasingly complex and numerous implementations of numerical algorithms in many different\r\nprogramming languages, the verification, validation and paradigms of open science such as\r\nreproducibility are ever harder to accomplish. In many cases, numerical solutions to the same\r\nmathematical problem are developed concurrently with no means of benchmarking as there is no common\r\nground for comparison. Moreover, adoption or modification of newly developed algorithms often means\r\neither a complete re-implementation of the algorithm in the researcher's software ecosystem or heavy\r\nmodifictions of one's own code to interact with the third-party software. A prominent example is the\r\ndiscipline of model order reduction (MOR) where various methods to assemble reduced order models for\r\nequivalent mathematical models are developed. These methods are especially difficult to compare and\r\nadapt since a plethora of underlying software components are employed with no means of interchange.\r\n\r\nThe initiative for common open scientific computing interfaces ***OpenInterfaces*** strives to\r\nestablish a set of standard software interface definitions to enable the painless exchange of the\r\nvarious building blocks of modern scientific computing applications. We believe that such interfaces\r\nwill greatly improve the comparability of numerical algorithms and the re-usability of\r\nimplementations of these algorithms, ultimately increasing the efficiency of research as well as\r\nfacilitating the adaption of novel methods into production code.\r\n\r\nThe interfaces will be defined on the grounds of the following principles:\r\n\r\n* Open - the specification will be freely available and published under open licenses.\r\n* Community - a community driven development process will ensure applicability.\r\n* Standard - consistency and modularity among all components will be upheld.\r\n* Tools - reference implementations and language bindings will be supplied.\r\n\r\n\r\nScope\r\n-----\r\n\r\nAll defined interfaces will be accompanied by a reference implementation in the C programming\r\nlanguage, the established standard for portable library interfaces.  For all major scientific\r\ncomputing languages, we will implement idiomatic bi-directional language bindings to these C library\r\ninterfaces, allowing easy interconnection of components, independently of their implemenation\r\nlanguage. \r\n\r\nWe aim at supporting the following languages:\r\n\r\n* C++\r\n* Python (NumPy / SciPy)\r\n* Matlab / Octave\r\n* Julia\r\n* Fortran\r\n* R\r\n\r\n\r\nProjects\r\n--------\r\n\r\nCurrently targeted projects include:\r\n\r\n* problem description interface for ODEs / PDEs and control problems\r\n* high-level ODE / PDE solver interface\r\n* solver solution interface\r\n* internal solver algorithm and data structure interface\r\n\r\nPossible appplications of these interfaces include:\r\n\r\n* automatic benchmarking of PDE / ODE solvers for arbitrary problem sets \r\n* application of model order reduction algorithms to arbitrary high-dimensional problems\r\n* application of different model order reduction algorithms to a given high-dimensional problem\r\n* usage of arbitrary microscale solvers in multiscale methods\r\n\r\nYou are welcome to add your interface project proposals.\r\n\r\n\r\nTeam\r\n----\r\n\r\n* Christian Himpe (University of Münster)\r\n* Stephan Rave (University of Münster)\r\n\r\nJoin Us!\r\n\r\n\r\nContact\r\n-------\r\n\r\nIf you wish to contact us, please join our mailinglist:\r\n\r\nhttp://lists.openinterfaces.org/cgi-bin/mailman/listinfo/devel\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}